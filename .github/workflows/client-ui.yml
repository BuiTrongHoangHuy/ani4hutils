name: client-ui-ci
on:
  push:
    branches:
      - deploy/client-ui
      - deploy/ui
jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/v2r1j0e6/ani4h-client-ui:latest ./client-ui
          docker push $ECR_REGISTRY/v2r1j0e6/ani4h-client-ui:latest
  Deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.UI_HOST }}
          USER_NAME: ${{ secrets.SSH_USER_NAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              APP_NAME=ani4h-client-ui &&
              docker rm -f ${APP_NAME} &&
              echo pull &&
              docker pull $ECR_REGISTRY/v2r1j0e6/${APP_NAME}i:latest &&
              docker run -d --name ${APP_NAME} \
              -p 80:3000 \
              $ECR_REGISTRY/v2r1j0e6/${APP_NAME}:latest
          '  

  

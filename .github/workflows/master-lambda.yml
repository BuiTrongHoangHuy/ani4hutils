name: ci
on:
  push:
    branches:
      - deploy/ffmpeg-master-lambda
jobs:
  build:
    name: Build &  Deploy
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      # Checkout source code
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
            go-version: '1.22.x'


      - name: Install dependencies
        run: go mod download

      - name: Build
        run:  CGO_ENABLED=0 GOOS=linux go build -v -a -o app ./ffmpeg/master

      # Login to ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG:  ani4h-${{ steps.get-commit-hash.outputs.commit-hash }}

        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./ffmpeg/master/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  deploy-lambda-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Deploy new code
        env:
          ECR_REGISTRY: ${{ needs.build.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        run: aws lambda update-function-code --function-name ${{secrets.FUNCTION_NAME}} --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:latest
